Cooperativa di negozi di musica

ESEMPIO D'UTILIZZO:
in una console:
    python2 store_server.py 8000
in un'altra:
    python2 service.py 5000
in un browser:
    localhost 127.0.0.1:5000/index.html

store_server può partire sulla porta che vuole ma poi service va a cercarlo sempre dove dice shops.json ovvero a localhost:8000

Ci sono vari negozi di supporti fisici contenenti musica.
Per ritardare il loro inevitabile fallimento decidono di fare un sito che permetta di browsare in un colpo solo tutti i loro database, semplificando così la vita ai possibili clienti.

Lo sviluppo del servizio va quindi implementato attorno a questo caso d'uso:

- Utente va sul sito unico, fa la ricerca(per nome, o genere, o...)
- Il sito chiede ai negozi, via SOAP
- I negozi, dei servizi SOAP, rispondono
- Il sito presenta i risultati della query all'utente

I negozianti devono poter aggiungere e rimuovere album dai loro database. Lo fanno attraverso un comando da console, per simulare il caso in cui questo comando possa venire incollato su una preesistente infrastruttura di gestione del database.

Descrizione dei moduli, fra parentesi le librerie utilizzate:
- service.py
    L'interfaccia web (Flask) con cui vengono prodotte le query
- query.py
    Il modulo che fa la richiesta SOAP (suds)
- store.py
    Il servizio SOAP (spyne)

Che dati contiene un Record: vedere store_server.py

records.db contiene già un album di prova.